[
["index.html", "R package development workshop Chapter 1 R package development 1.1 Info 1.2 Installation", " R package development workshop built on 2018-09-27 Chapter 1 R package development 1.1 Info Code: https://github.com/PortlandRUserGroup/pkgdev/ Issues/Bug reports: https://github.com/PortlandRUserGroup/pkgdev/issues Workshop Materials: http://portlandrusergroup.github.io/pkgdev/ Packages devtools: https://cran.rstudio.com/web/packages/devtools/ testthat: https://cran.rstudio.com/web/packages/testthat/ knitr: https://cran.rstudio.com/web/packages/knitr/ 1.2 Installation Stable version from CRAN install.packages(c(&quot;devtools&quot;, &quot;testthat&quot;, &quot;knitr&quot;)) Optionally: devtools::install_github(&quot;metacran/mason.rpkg&quot;) devtools::install_github(&quot;metacran/mason.github&quot;) devtools::install_github(&quot;metacran/mason&quot;) install.packages(&quot;usethis&quot;) "],
["intro.html", "Chapter 2 Introduction 2.1 Setup 2.2 Why make an R package?", " Chapter 2 Introduction 2.1 Setup Does everyone have devtools installed? install.packages(&quot;devtools&quot;) Check out the devtools cheat sheet: https://rawgit.com/rstudio/cheatsheets/master/package-development.pdf note that devtools is being split into many pkgs, just be aware https://github.com/r-lib/devtools#conscious-uncoupling 2.2 Why make an R package? the best way to organize code have function documentation have package documentation can have tests allow for namespacing make it easy to wrap compiled code good job skill if on CRAN, make your code useable by others You‚Äôll be glad you moved your code into a package. "],
["make-a-package.html", "Chapter 3 Make a package 3.1 in RStudio 3.2 on your command line 3.3 usethis", " Chapter 3 Make a package Let‚Äôs start making a package! 3.1 in RStudio 3.2 on your command line Using the devtools package: devtools::create(&quot;foo&quot;) Or, with the mason package: install first: devtools::install_github(&quot;metacran/mason&quot;) devtools::install_github(&quot;metacran/mason.rpkg&quot;) devtools::install_github(&quot;metacran/mason.github&quot;) Create a package mason::mason(&#39;bar&#39;) 3.3 usethis Optionally, you can use the usethis package https://github.com/r-lib/usethis to help in step in package create/maintainance. use_mit_license(&quot;My Name&quot;) use_package(&quot;MASS&quot;, &quot;Suggests&quot;) use_dev_package(&quot;callr&quot;) use_readme_md() use_news_md() use_test(&quot;my-test&quot;) use_git() "],
["package-structure.html", "Chapter 4 Package structure 4.1 Package metdata (DESCRIPTION) 4.2 Code (R/) 4.3 Namespaces (NAMESPACE) 4.4 Object documentation (man/) 4.5 Vignettes (vignettes/) 4.6 Tests (tests/) 4.7 Data (data/) 4.8 Complied Code (src/) 4.9 Installed files (inst/)", " Chapter 4 Package structure 4.1 Package metdata (DESCRIPTION) Package: mypackage Title: What The Package Does (one line, title case required) Version: 0.1 Authors@R: person(&quot;First&quot;, &quot;Last&quot;, email = &quot;first.last@example.com&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;)) Description: What the package does (one paragraph) Depends: R (&gt;= 3.1.0) License: What license is it under? URL: http://someurl BugReports: http://someurl gotchas/must do‚Äôs: no period at end of Title! single quote words in the Description that are likely to not be known in a simple spell checker. ABSOLUTELY make sure to include url for where the source code is and where to report bugs/issues. Seriously, this is not a joke. I do not use packages that don‚Äôt have URLs. 4.2 Code (R/) The R/ folder contains any number of .R files. It‚Äôs worth thinking about organization, see http://r-pkgs.had.co.nz/r.html#r-organising for more. 4.3 Namespaces (NAMESPACE) The NAMESPACE file contains: what to import from othe packages what to export (expose publicly), available via :: note that internal fxns are still available via ::: what does importFrom() mean? how is it different from import() Hot tips If you run into namespace problems, delete the lines in NAMESPACE and re-document the package if you accidentally delete the NAMESPACE file, re-document it‚Äôs a good place to look for: what you‚Äôre exporting and what you are not exporting same for importing 4.4 Object documentation (man/) man/ contains files with extension .Rd. You should not be editing these by hand. Use roxygen2 package with documentation associated with your code in .R files. 4.5 Vignettes (vignettes/) Vignettes are typically longer form examples/documentation on your package, and are linked to on the CRAN page for each package. See 10.3 for more. 4.6 Tests (tests/) Tests help you make sure your package does what you expect it to do, including as you make changes. See 8 for more. 4.7 Data (data/) data/ holds package data, used in your package functions, and optionally exposed to the user. 4.8 Complied Code (src/) Typically C or C++ code ‚Ä¶ too much detail for now. This is typically the problem when you see a bunch of stuff printed to the console when you have package installation problems - once a binary is available installation is sorted. 4.9 Installed files (inst/) Holds various files used by the package, e.g., inst/examples - files you want to use in examples that are not R objects, e.g., csv files You can access these files with system.file(&quot;examples/file.csv&quot;, package = &quot;your_package&quot;) "],
["functions.html", "Chapter 5 Functions 5.1 Exercise 5.2 Functions in a package", " Chapter 5 Functions You‚Äôll need to organize your code into functions in order to use the code in a package. Function structure: foo &lt;- function(x) { x^2 } You can call the function foo(5) #&gt; [1] 25 5.1 Exercise Write you own function Write a function Run it! Any problems? report back 5.2 Functions in a package In a real R package you DO NOT want to export all functions in the package. RStudio/devtools/usethis/etc. do put exportPattern(&quot;^[^\\\\.]&quot;) in your NAMESPACE file by default. Important: Make sure to remove this and explicitly export functions that you want users to use with RStudio buttons or devtools::document() or similar. "],
["write-some-code.html", "Chapter 6 Coding in a package 6.1 Edit code, run, modify, repeat 6.2 Code 6.3 Docs 6.4 Generate documentation 6.5 Install the package 6.6 Yay!", " Chapter 6 Coding in a package 6.1 Edit code, run, modify, repeat When developing a package, find whatever method is most efficient for you to develop the package quickly. You want to be able to edit code, then run/test it, modify, rerun, modify, etc. until you are happy with it. For some this may mean working in an IDE (RStudio) - for others this means a text editor and console - for others maybe Vim or Emacs. Get used to the keyboard shortcuts or buttons to make this flow easy and quick. devtools::load_all() (or equivalent buttons/shortcuts in IDE) is your friend - though beware you still want to check your package outside of a load all context (See 9) 6.2 Code 6.2.1 Exercise Write you own function Write a function Put it in a file in your R package 6.3 Docs Time to document your function! Above your function start each line with #'. There‚Äôs many, many options for documenting functions. 6.3.1 Exercise Let‚Äôs do a minimal set: Title Export tag Parameter definitions Return tag Examples #&#39; Multiply a number by 2 #&#39; #&#39; @export #&#39; @param x a numeric value. required #&#39; @return a number #&#39; @examples #&#39; multiply2(x = 5) multiply2 &lt;- function(x) { stopifnot(is.numeric(x)) x * 2 } 6.4 Generate documentation In RStudio push the document button or keyboard shortcut, or on the command line run devtools::document() or similar. Notice what state your NAMESPACE file is in before and after. 6.5 Install the package Now install the package. in RStudio: Install and Restart command line: devtools::install() restart your R session load your package library(packagename) Can you run your function? if not, let‚Äôs dig in and sort it out 6.6 Yay! "],
["dependencies.html", "Chapter 7 Dependencies 7.1 Adding dependencies 7.2 Add a dependency to a package 7.3 BONUS: What are system dependencies?", " Chapter 7 Dependencies Dependencies = other R packages. There are (mostly) three types: Depends Imports Suggests Enhances is used rarely 7.1 Adding dependencies Add an entry in the DESCRIPTION file Add a declaration of what you are importing from the package: all of the package, or (@import package) certain functions (@importFrom package function) there‚Äôs no standard for where to do this. i like to do in a package named manual file (e.g., foobar-package.R) so you can keep track of all imports in one place but some like to list imports in each file/function where they are used You can do this manually or via usethis::use_package('package_name') 7.2 Add a dependency to a package 7.2.1 Exercise Choose a package that‚Äôs easy for you to work with. Add it to your package Reinstall and load your package Does it work? 7.3 BONUS: What are system dependencies? "],
["tests.html", "Chapter 8 Tests 8.1 test infrastructure 8.2 write some tests 8.3 run tests 8.4 structure of a test file 8.5 further reading", " Chapter 8 Tests Tests are really important to a healthy package. Some people even start off with tests! üòÆ see TDD, or ‚Äútest driven development‚Äù 8.1 test infrastructure 8.1.1 Exercise: set up test infrastructure Create manually, or run usethis::use_testthat() which: creates tests/testthat.R creates tests/testthat/ adds testthat package as a Suggested package 8.2 write some tests 8.2.1 Exercise: write tests Run usethis::use_test(&#39;file-name&#39;) Or create a file in tests/testthat/ of the form test-foobar.R Within the test file, if you ran use_test() you‚Äôll have something like: context(&quot;test-stuff&quot;) test_that(&quot;multiplication works&quot;, { expect_equal(2 * 2, 4) }) Add a test like that above if you don‚Äôt have it already. 8.3 run tests 8.3.1 Exercise: run tests from the command line Rscript -e &#39;devtools::test()&#39; from R devtools::test() Or buttons in IDE 8.4 structure of a test file context states the overall goal of the file, e.g., tests for function helloworld context can be repeated whenever you like context are the things printed when you run tests test_that blocks, or function calls, can have any code run and at least one test expectation, e.g., expect_equal 8.5 further reading the tests chapter "],
["package-checks.html", "Chapter 9 Package checks 9.1 RStudio 9.2 command line 9.3 the really hard way 9.4 see also", " Chapter 9 Package checks Now that we‚Äôve built an R package, we need to check it. Run R check often to make sure you aren‚Äôt breaking something in your package. 9.1 RStudio Keyboard shortchuts: shift + command + E (shift + ctrl + E) OR use buttons 9.2 command line from your shell Rscript -e &#39;devtools::check()&#39; OR from within R devtools::check() OR with the newer package rcmdcheck rcmdcheck::rcmdcheck() 9.3 the really hard way R CMD BUILD your_package_folder R CMD CHECK your_package_name.tar.gz 9.4 see also R-hub: rhub package (many different fxn options), website: https://builder.r-hub.io/, R pkg https://cran.rstudio.com/web/packages/rhub/ win-builder: via devtools::build_win() "],
["extras.html", "Chapter 10 Extras 10.1 License 10.2 continuous integration 10.3 vignettes 10.4 resources 10.5 CRAN/Bioconductor", " Chapter 10 Extras 10.1 License Choose A License is a great resource for choosing a license in general. For R packages, a safe bet is MIT Karl Broman has some good advice on choosing a license for your R package. 10.2 continuous integration CI is integral to a healthy package workflow. The ‚Äúcontinuous‚Äù part means each deployment to github/gitlab is checked. Check out travis and tic for R based helpers. 10.3 vignettes TLDR: if nothing else, you should have examples in your README, correct? Just make a vignette out of that. vignettes are super important - if users don‚Äôt know how to use your package they won‚Äôt use it. See R pkgs vignettes chapter for more. 10.4 resources if/when you run into trouble: Writing an R package from scratch - Hilary Parker Developing R packages - Jeff Leek stat545 - Write your own R package - Jenny Bryan‚Äôs statistics 545 class at UBC R package primer - Karl Boman Making Your First R Package - Fong Chun Chan R Package Development Pictorial - Matthew Denny Coursera course on building R packages R Packages by Hadley for a full treatment of the subject. From time to time you may need to reference CRAN‚Äôs Writing R Extensions. 10.5 CRAN/Bioconductor No experience with Bioconductor, though I can put you in touch with people that do. CRAN is a slippery target. devtools::release() makes this easier, reminding you to check many things that may get your package rejected. "],
["session-info.html", "Chapter 11 session info", " Chapter 11 session info Session info for this book sessioninfo::session_info() #&gt; ‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #&gt; setting value #&gt; version R version 3.5.1 Patched (2018-08-12 r75119) #&gt; os macOS High Sierra 10.13.6 #&gt; system x86_64, darwin15.6.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; ctype en_US.UTF-8 #&gt; tz US/Pacific #&gt; date 2018-09-27 #&gt; #&gt; ‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #&gt; package * version date lib source #&gt; assertthat 0.2.0 2017-04-11 [1] CRAN (R 3.5.0) #&gt; backports 1.1.2 2017-12-13 [1] CRAN (R 3.5.0) #&gt; bookdown * 0.7 2018-02-18 [1] CRAN (R 3.5.0) #&gt; cli 1.0.1 2018-09-25 [1] CRAN (R 3.5.1) #&gt; crayon 1.3.4 2017-09-16 [1] CRAN (R 3.5.0) #&gt; digest 0.6.17 2018-09-12 [1] CRAN (R 3.5.1) #&gt; evaluate 0.11 2018-07-17 [1] CRAN (R 3.5.1) #&gt; htmltools 0.3.6 2017-04-28 [1] CRAN (R 3.5.0) #&gt; knitr * 1.20 2018-02-20 [1] CRAN (R 3.5.0) #&gt; magrittr 1.5 2014-11-22 [1] CRAN (R 3.5.0) #&gt; R6 2.2.2 2017-06-17 [1] CRAN (R 3.5.0) #&gt; Rcpp 0.12.18 2018-07-23 [1] CRAN (R 3.5.1) #&gt; rlang 0.2.2 2018-08-16 [1] CRAN (R 3.5.0) #&gt; rmarkdown 1.10 2018-06-11 [1] CRAN (R 3.5.0) #&gt; rprojroot 1.3-2 2018-01-03 [1] CRAN (R 3.5.0) #&gt; rstudioapi 0.7 2017-09-07 [1] CRAN (R 3.5.0) #&gt; sessioninfo 1.1.0 2018-09-25 [1] CRAN (R 3.5.1) #&gt; stringi 1.2.4 2018-07-20 [1] CRAN (R 3.5.0) #&gt; stringr 1.3.1 2018-05-10 [1] CRAN (R 3.5.0) #&gt; testthat * 2.0.0 2017-12-13 [1] CRAN (R 3.5.0) #&gt; withr 2.1.2 2018-03-15 [1] CRAN (R 3.5.0) #&gt; xfun 0.3 2018-07-06 [1] CRAN (R 3.5.1) #&gt; yaml 2.2.0 2018-07-25 [1] CRAN (R 3.5.1) #&gt; #&gt; [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library "]
]
